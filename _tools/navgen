#!/bin/bash

BASE_INDENT="  "
INDEX_FILE_PATTERNS="^(index\.md|README\.md)$"
USE_INDEX_FILE_FOR_FOLDER_LINKS="yes"
REMOVE_UNDERLINE_FROM_DOC_DIR_NAMES="yes"

trim_trailing_slashes() {
    local INPUT_STRING="$1"
    echo "${INPUT_STRING%/}"
}

print_entry() {
	echo "${1}  - title: ${2}"
	echo "${1}    url: ${3}"
	if [ "$#" -eq 4 ]; then
		echo "${1}    ${4}"
	fi
}

check_directory_content() {
    /bin/ls -1 -p "${1}" | grep -Ev "${INDEX_FILE_PATTERNS}" >/dev/null
}

add_file_entry () {
	local FILE_TITLE=$(read_file_title "${1}")
	
	[ -n "$FILE_TITLE" ] && TITLE="\"$FILE_TITLE\""

	print_entry "${INDENT}" "${TITLE}" "${URL}"
}

add_dir_entry () {
	local EXCLUDED_FILES=("${1}/index.md" "${1}/README.md")
	local INDEX_FILE="index"

	for EXCLUDED_FILE in "${EXCLUDED_FILES[@]}"; do
		if [ -f "$EXCLUDED_FILE" ]; then
			local DIR_TITLE=$(read_file_title "$EXCLUDED_FILE")
            local BASE_NAME=$(basename "${EXCLUDED_FILE}")
            INDEX_FILE=${BASE_NAME%.*}
			[ -n "$DIR_TITLE" ] && TITLE="\"$DIR_TITLE\""            
			break
		fi
	done

    local URL="${2}"
    [ "${USE_INDEX_FILE_FOR_FOLDER_LINKS}x" != "x" ] && URL="${URL}/${INDEX_FILE}"

	print_entry "${INDENT}" "${TITLE}" "${URL}" "subnav:${3}"
}

generate_yaml() {
    local DIR="$1"
    local INDENT="$2"
    local RELATIVE_PATH=${DIR#$START_DIR}
    [ "$RELATIVE_PATH" == "$DIR" ] && RELATIVE_PATH=""
    
    for ITEM in $(/bin/ls -1 "$DIR" | grep -Ev "${INDEX_FILE_PATTERNS}" | sort); do
        local ITEM_PATH="$DIR/$ITEM"
        local ITEM_NAME=$(basename "$ITEM")
        local TITLE="\"$ITEM_NAME\""
        local URL="$ROOT_DIR_NAME${RELATIVE_PATH}/${ITEM_NAME%.md}"
        
        if [ -f "$ITEM_PATH" ]; then
			add_file_entry "$ITEM_PATH"
        elif [ -d "$ITEM_PATH" ]; then
			add_dir_entry "$ITEM_PATH" "$URL" "" # "$(check_directory_content "$ITEM_PATH" || echo " true")"
			generate_yaml "$ITEM_PATH" "${INDENT}${BASE_INDENT}"
        fi
    done
}

read_file_title() {
    local FILE="$1"
    local TITLE_REGEXES=('^short_title: (.*)$' '^title: (.*)$')
    local DELIMITER_FOUND=false
    local TITLE=""
    
    while IFS= read -r LINE; do
        if [ "$LINE" == "---" ]; then
            if $DELIMITER_FOUND; then
                break
            else
                DELIMITER_FOUND=true
            fi
        elif $DELIMITER_FOUND; then
            if [[ "$LINE" =~ ${TITLE_REGEXES[0]} ]]; then
                TITLE="${BASH_REMATCH[1]}"
                # Can break here, sub-title has the top precedence now
                break
            elif [[ "$LINE" =~ ${TITLE_REGEXES[1]} ]]; then
                TITLE="${BASH_REMATCH[1]}"
                # Do not break here the order can be anything
            fi
        fi
    done < "$FILE"
    
    echo "$TITLE"
}

process_params() {
    local DOC_FOLDER="${1}"
    local OUTPUT_FILE="${2}"

    > "$OUTPUT_FILE"

    echo "# --------------------------------------" >> "$OUTPUT_FILE"
    echo "# This file is auto generated           " >> "$OUTPUT_FILE"
    echo "#      - DO NOT EDIT -                  " >> "$OUTPUT_FILE"
    echo "# Use the _tools/navgen script instead  " >> "$OUTPUT_FILE"
    echo "# --------------------------------------" >> "$OUTPUT_FILE"
    echo ""

    for DOC_PROJECT_ITEM in $(find -L "${DOC_FOLDER}" -mindepth 1 -maxdepth 1 -type d | sort); do
        START_DIR=$(trim_trailing_slashes "${DOC_PROJECT_ITEM}")
        ROOT_DIR_NAME=$(basename "$START_DIR")
        [ "${REMOVE_UNDERLINE_FROM_DOC_DIR_NAMES}x" != "x" ] && ROOT_DIR_NAME=${ROOT_DIR_NAME#_}

        echo "" >> "$OUTPUT_FILE"
        echo "# ${ROOT_DIR_NAME}" >> "$OUTPUT_FILE"
        echo "${ROOT_DIR_NAME}-nav:" >> "$OUTPUT_FILE"

        add_dir_entry "$START_DIR" "${ROOT_DIR_NAME}" "" >> "$OUTPUT_FILE"
        generate_yaml "$START_DIR" "" >> "$OUTPUT_FILE"

        shift
    done

    echo "YAML structure has been generated and saved to $OUTPUT_FILE"
}

# Check for the correct number of command-line parameters
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <_doc_folder> <output_file>"
    exit 1
fi

process_params "$@"
